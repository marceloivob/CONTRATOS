# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: INFO
    io.github.jhipster: INFO
    br.gov.economia.maisbrasil.contratos: DEBUG
    com.zaxxer.hikari.HikariConfig: DEBUG
    com.zaxxer.hikari: TRACE
    

management:
  metrics:
    export:
      prometheus:
        enabled: false
        
vrpl:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: ${DB_URL_CONNECTION_MANDATARIAS}
    username: ${DB_USER_MANDATARIAS}
    password: ${DB_PASSWORD_MANDATARIAS}
    driver-class-name: org.postgresql.Driver
    hikari:
      poolName: Hikari
      auto-commit: false

spring:
  profiles:
    active: prod
    include:
      - swagger
      # Uncomment to activate TLS for the dev profile
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: ${DB_URL_CONNECTION_MANDATARIAS}
    username: ${DB_USER_MANDATARIAS}
    password: ${DB_PASSWORD_MANDATARIAS}
    hikari:
      poolName: Hikari
      auto-commit: false
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: mvp02_checklist, mvp02_alteracoes
    default-schema: contratos
    liquibase-schema: contratos
    enabled: ${MAISBRASIL_CONTRATOS_LIQUIBASE_ENABLED:false}    

    
  mail:
    host: localhost
    port: 25
    username:
    password:
  thymeleaf:
    cache: true
  sleuth:
    sampler:
      probability: 1 # report 100% of traces
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    base-url: http://localhost:9411
    enabled: false
    locator:
      discovery:
        enabled: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias maisbrasilcontratosbackend -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#    port: 443
#    ssl:
#        key-store: classpath:config/tls/keystore.p12
#        key-store-password: password
#        key-store-type: PKCS12
#        key-alias: maisbrasilcontratosbackend
#        # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#        ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 8080
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css, application/javascript, application/json
    min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: ${JWT_PUBLIC_KEY}
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: http://my-server-url-to-change # Modify according to your server's URL
  metrics:
    logs: # Reports metrics in the logs
      enabled: false
      report-frequency: 60 # in seconds
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
  audit-events:
    retention-period: 30 # Number of days before audit events are deleted.

maisbrasil:
  contratos:    
    inativar-emissao-aio-periodo-eleitoral: ${CONTRATOS_INATIVAR_EMISSAO_AIO_PERIODO_ELEITORAL}
    integracao:
      idp:
        uri-base: ${CONTRATOS_URL_IDP}
      siconv:
        uri-base: ${CONTRATOS_URL_SICONV}
  medicao:
    url: ${MEDICAO_GRPC_HOST}
    porta: ${MEDICAO_GRPC_PORT} 
  cadastro:
    url: ${MAISBRASIL_CADASTRO_GRPC_HOST}
    porta: ${MAISBRASIL_CADASTRO_GRPC_PORT}
    
integrations:
   PRIVATE:
      CEPH:
         bucket: contratos
         endpoint: https://storagegw.estaleiro.serpro.gov.br
         accessToken: ${CONTRATOS_CEPH_ACCESS_KEY}
         secretKey: ${CONTRATOS_CEPH_SECRET_KEY}
         region: undefined
         maxFileSizeInMB: 10
         useSSL: false
      MAIL:
         from: plataformamaisbrasil@economia.gov.br
         remote-host: mail-apl.serpro.gov.br
         remote-port: 25
      GRPC:
         CPS:
            endpoint: ${CPS_GRPC_HOST_CONTRATOS}
            port: ${CPS_GRPC_PORT_CONTRATOS}
            useSSL: ${CPS_GRPC_USE_SSL}
         SICONV:
            endpoint: ${SICONV_GRPC_HOST_CONTRATOS}
            port: ${SICONV_GRPC_PORT_CONTRATOS}
            useSSL: ${SICONV_GRPC_USE_SSL}
         VRPL:
            endpoint: ${VRPL_GRPC_HOST}
            port: ${VRPL_GRPC_PORT}
            useSSL: ${SICONV_GRPC_USE_SSL}
      REST:
         SICONV:
            endpoint: ${CONTRATOS_URL_SICONV}
            secretKey: ${SICONV_SECRET_KEY_PROCESSO_EXECUCAO:aW50ZWdyYWNhb192cnBsX3NpY29udg==}

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
